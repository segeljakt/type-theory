use crate::ast::*;
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

match {
    "(", ")",
    "λ", ".",
    "let", "=", "in",
    "::", "∀", "->",
    ";",
} else {
    r"[1-9][[:digit:]]*"                => TInt,
    r"(true)|(false)"                   => TBool,
    r#""[[:word:]]+""#                  => TStr,
} else {
    r"[[:alpha:]_\\+\-\\*/][[:word:]]*" => TName,
}

Box<T>: Box<T> = T => Box::new(<>);
Set<T>: Set<T> = T+ => <>.into_iter().collect();

pub Program: (Vec<(Name, Scheme)>, Vec<Exp>) = Fun* (<Exp> ";")+;

Exp = Exp0;

Exp0: Exp = {
    "let" <Name> "=" <Box<Exp1>> "in" <Box<Exp0>> => Exp::Let(<>),
    Exp1,
};

Exp1: Exp = {
  "λ" <Name> "." <Box<Exp1>> => Exp::Abs(<>),
  Exp2,
};

Exp2: Exp = {
    <Box<Exp2>> <Box<Exp3>> => Exp::App(<>),
    Exp3,
};

Exp3: Exp = {
    Name => Exp::Var(<>),
    Lit => Exp::Lit(<>),
    "(" <Exp> ")",
    ! => { errors.push(<>); Exp::Error },
};

Name: Name = TName => <>.into();

Lit: Lit = {
    TInt  => Lit::Int(<>.parse().unwrap()),
    TBool => Lit::Bool(<>.parse().unwrap()),
    TStr  => Lit::Str(<>.into()),
};

Fun: (Name, Scheme) = <Name> "::" <("∀" <Set<Name>> ".")?> <Type> => {
  let (name, quantifiers, ty) = (<>);
  if let Some(quantifiers) = quantifiers {
      (name, Scheme::Poly(ty, quantifiers))
  } else {
      (name, Scheme::Mono(ty))
  }
};

Type = Type0;

Type0: Type = {
    <Type1> "->" <Type0> => Type::Cons("->".into(), vec![<>]),
    Type1,
};

Type1: Type = {
    Name => {
      match <>.as_ref() {
        "int" | "bool" | "str" => Type::Cons(<>, vec![]),
        _ => Type::Var(<>),
      }
    },
    "(" <Type> ")",
    ! => { errors.push(<>); Type::Error }
};
